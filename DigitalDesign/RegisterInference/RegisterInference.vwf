/*
WARNING: Do NOT edit the input and output ports in this file in a text
editor if you plan to continue editing the block that represents it in
the Block Editor! File corruption is VERY likely to occur.
*/

/*
Copyright (C) 1991-2008 Altera Corporation
Your use of Altera Corporation's design tools, logic functions 
and other software and tools, and its AMPP partner logic 
functions, and any output files from any of the foregoing 
(including device programming or simulation files), and any 
associated documentation or information are expressly subject 
to the terms and conditions of the Altera Program License 
Subscription Agreement, Altera MegaCore Function License 
Agreement, or other applicable license agreement, including, 
without limitation, that your use is for the sole purpose of 
programming logic devices manufactured by Altera and sold by 
Altera or its authorized distributors.  Please refer to the 
applicable agreement for further details.
*/

HEADER
{
	VERSION = 1;
	TIME_UNIT = ns;
	DATA_OFFSET = 0.0;
	DATA_DURATION = 10000.0;
	SIMULATION_TIME = 10000.0;
	GRID_PHASE = 0.0;
	GRID_PERIOD = 10.0;
	GRID_DUTY_CYCLE = 50;
}

SIGNAL("clk")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("clr")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("d")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("data")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("load")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("pre")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("q1")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("q2")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

TRANSITION_LIST("clk")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 100;
			LEVEL 0 FOR 50.0;
			LEVEL 1 FOR 50.0;
		}
	}
}

TRANSITION_LIST("clr")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 6720.0;
		LEVEL 1 FOR 1120.0;
		LEVEL 0 FOR 2160.0;
	}
}

TRANSITION_LIST("d")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 400.0;
		LEVEL 1 FOR 520.0;
		LEVEL 0 FOR 440.0;
		LEVEL 1 FOR 560.0;
		LEVEL 0 FOR 1000.0;
		LEVEL 1 FOR 480.0;
		LEVEL 0 FOR 680.0;
		LEVEL 1 FOR 440.0;
		LEVEL 0 FOR 1120.0;
		LEVEL 1 FOR 880.0;
		LEVEL 0 FOR 640.0;
		LEVEL 1 FOR 1320.0;
		LEVEL 0 FOR 1520.0;
	}
}

TRANSITION_LIST("data")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 360.0;
		LEVEL 1 FOR 1080.0;
		LEVEL 0 FOR 1160.0;
		LEVEL 1 FOR 960.0;
		LEVEL 0 FOR 600.0;
		LEVEL 1 FOR 840.0;
		LEVEL 0 FOR 1400.0;
		LEVEL 1 FOR 1080.0;
		LEVEL 0 FOR 2520.0;
	}
}

TRANSITION_LIST("load")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 7280.0;
		LEVEL 1 FOR 680.0;
		LEVEL 0 FOR 560.0;
		LEVEL 1 FOR 560.0;
		LEVEL 0 FOR 920.0;
	}
}

TRANSITION_LIST("pre")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 240.0;
		LEVEL 1 FOR 480.0;
		LEVEL 0 FOR 1320.0;
		LEVEL 1 FOR 520.0;
		LEVEL 0 FOR 760.0;
		LEVEL 1 FOR 640.0;
		LEVEL 0 FOR 1080.0;
		LEVEL 1 FOR 440.0;
		LEVEL 0 FOR 560.0;
		LEVEL 1 FOR 440.0;
		LEVEL 0 FOR 1760.0;
		LEVEL 1 FOR 560.0;
		LEVEL 0 FOR 1200.0;
	}
}

TRANSITION_LIST("q1")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 457.129;
		LEVEL 1 FOR 500.0;
		LEVEL 0 FOR 500.0;
		LEVEL 1 FOR 500.0;
		LEVEL 0 FOR 1000.0;
		LEVEL 1 FOR 500.0;
		LEVEL 0 FOR 700.0;
		LEVEL 1 FOR 400.0;
		LEVEL 0 FOR 1100.0;
		LEVEL 1 FOR 900.0;
		LEVEL 0 FOR 700.0;
		LEVEL 1 FOR 233.543;
		LEVEL 0 FOR 566.457;
		LEVEL 1 FOR 473.595;
		LEVEL 0 FOR 1469.276;
	}
}

TRANSITION_LIST("q2")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 252.209;
		LEVEL 1 FOR 706.389;
		LEVEL 0 FOR 500.0;
		LEVEL 1 FOR 500.0;
		LEVEL 0 FOR 93.611;
		LEVEL 1 FOR 606.389;
		LEVEL 0 FOR 300.0;
		LEVEL 1 FOR 1100.0;
		LEVEL 0 FOR 100.0;
		LEVEL 1 FOR 400.0;
		LEVEL 0 FOR 493.611;
		LEVEL 1 FOR 506.389;
		LEVEL 0 FOR 100.0;
		LEVEL 1 FOR 900.0;
		LEVEL 0 FOR 1300.0;
		LEVEL 1 FOR 1000.0;
		LEVEL 0 FOR 1141.402;
	}
}

DISPLAY_LINE
{
	CHANNEL = "clk";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 0;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "clr";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 1;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "d";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 2;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "data";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 3;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "load";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 4;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "pre";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 5;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "q1";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 6;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "q2";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 7;
	TREE_LEVEL = 0;
}

TIME_BAR
{
	TIME = 9725;
	MASTER = TRUE;
}
;
